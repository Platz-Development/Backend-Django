# Generated by Django 5.1.6 on 2025-04-01 18:54

import django.core.validators
import django.db.models.deletion
import encrypted_model_fields.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('payments', '0002_alter_payment_learner_and_more'),
        ('users', '0005_tutor_digital_signature'),
    ]

    operations = [
        migrations.CreateModel(
            name='LiveClassSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Public session identifier for GDPR-safe sharing', unique=True)),
                ('livekit_room_name', models.CharField(blank=True, max_length=100, null=True)),
                ('livekit_tutor_token', models.TextField(blank=True, null=True)),
                ('livekit_learner_token', models.TextField(blank=True, null=True)),
                ('livekit_token_expires', models.DateTimeField(null=True)),
                ('scheduled_start_time', models.DateTimeField(db_index=True, help_text="Scheduled start in tutor's timezone")),
                ('actual_start_time', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('end_time', models.DateTimeField(db_index=True)),
                ('primary_provider', models.CharField(choices=[('LIVEKIT', 'LiveKit'), ('DAILY_CO', 'Daily.co'), ('FALLBACK', 'Browser WebRTC')], default='LIVEKIT', max_length=10)),
                ('actual_provider', models.CharField(blank=True, choices=[('LIVEKIT', 'LiveKit'), ('DAILY_CO', 'Daily.co'), ('FALLBACK', 'Browser WebRTC')], max_length=10, null=True)),
                ('fallback_triggered', models.BooleanField(default=False)),
                ('fallback_reason', models.TextField(blank=True, help_text='Technical reason for fallback')),
                ('recording_consent', models.BooleanField(default=False, help_text='Learner consented to recording (GDPR Article 7)')),
                ('learner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='live_classes', to='users.user')),
                ('payment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='live_class', to='payments.payment')),
                ('tutor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='live_classes', to='users.tutor')),
            ],
            options={
                'ordering': ['-scheduled_start_time'],
            },
        ),
        migrations.CreateModel(
            name='SessionRecording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_id', models.CharField(help_text='Opaque storage identifier (GDPR pseudonymization)', max_length=256, unique=True)),
                ('storage_region', models.CharField(default='eu-west-1', help_text='AWS/GCP region for data residency compliance', max_length=20)),
                ('encryption_key_id', models.CharField(help_text='KMS key identifier for encrypted storage', max_length=64)),
                ('duration_seconds', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('file_size_mb', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('retention_days', models.PositiveSmallIntegerField(default=30, help_text='Days before automatic deletion (GDPR Right to Erasure)', validators=[django.core.validators.MaxValueValidator(365)])),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recording', to='live_class_streaming.liveclasssession')),
            ],
        ),
        migrations.CreateModel(
            name='SessionTelemetry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('packet_loss', models.FloatField(help_text='Packet loss ratio (0.05 = 5%)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('latency_ms', models.FloatField(help_text='Round-trip latency in milliseconds', validators=[django.core.validators.MinValueValidator(0)])),
                ('jitter_ms', models.FloatField(help_text='Network jitter in milliseconds', validators=[django.core.validators.MinValueValidator(0)])),
                ('resolution', models.CharField(choices=[('240p', '426x240'), ('360p', '640x360'), ('480p', '854x480'), ('720p', '1280x720')], help_text='Current output resolution', max_length=9)),
                ('fps', models.PositiveSmallIntegerField(help_text='Frames per second', validators=[django.core.validators.MaxValueValidator(60)])),
                ('provider', models.CharField(choices=[('LIVEKIT', 'LiveKit'), ('DAILY_CO', 'Daily.co'), ('FALLBACK', 'Browser WebRTC')], max_length=10)),
                ('is_fallback', models.BooleanField(default=False)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telemetry', to='live_class_streaming.liveclasssession')),
            ],
            options={
                'verbose_name_plural': 'Session Telemetry',
                'get_latest_by': 'timestamp',
            },
        ),
        migrations.CreateModel(
            name='TutorLiveClassApiSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key_source', models.CharField(choices=[('PLATFORM', 'Platform Default'), ('CUSTOM', 'Custom Keys')], default='PLATFORM', help_text='Source of API keys for this tutor', max_length=10)),
                ('custom_livekit_key', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Encrypted LiveKit API key (leave blank for platform default)')),
                ('custom_daily_co_key', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Encrypted Daily.co API key (leave blank for platform default)')),
                ('gdpr_consent', models.BooleanField(default=False, help_text='Tutor consents to data processing under GDPR')),
                ('coc_agreement', models.DateTimeField(blank=True, help_text='Timestamp of Code of Conduct acceptance', null=True)),
                ('bandwidth_verified', models.BooleanField(default=False, help_text='Tutor meets minimum bandwidth requirements')),
                ('last_bandwidth_test', models.DateTimeField(blank=True, help_text='Last network test timestamp', null=True)),
                ('tutor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='video_settings', to='users.tutor')),
            ],
            options={
                'verbose_name': 'Tutor Video Settings',
                'verbose_name_plural': 'Tutor Video Settings',
            },
        ),
        migrations.AddIndex(
            model_name='liveclasssession',
            index=models.Index(fields=['tutor', 'scheduled_start_time'], name='live_class__tutor_i_e63048_idx'),
        ),
        migrations.AddIndex(
            model_name='liveclasssession',
            index=models.Index(fields=['learner', 'scheduled_start_time'], name='live_class__learner_d686aa_idx'),
        ),
    ]

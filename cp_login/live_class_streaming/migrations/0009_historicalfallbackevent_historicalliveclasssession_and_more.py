# Generated by Django 5.1.6 on 2025-04-16 11:40

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import encrypted_model_fields.fields
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('live_class_streaming', '0008_alter_liveclasssession_payment'),
        ('payments', '0006_delete_payment'),
        ('users', '0006_historicalavailability_historicalcertification_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalFallbackEvent',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('triggered_by', models.CharField(choices=[('AUTO', 'System'), ('MANUAL', 'Tutor')], max_length=20)),
                ('reason', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='live_class_streaming.liveclasssession')),
            ],
            options={
                'verbose_name': 'historical fallback event',
                'verbose_name_plural': 'historical fallback events',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLiveClassSession',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Public session identifier for GDPR-safe sharing')),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELED', 'Canceled')], default='FAILED', max_length=10)),
                ('livekit_room_name', models.CharField(blank=True, max_length=100, null=True)),
                ('livekit_tutor_token', models.TextField(blank=True, null=True)),
                ('livekit_learner_token', models.TextField(blank=True, null=True)),
                ('livekit_learner_token_expires', models.DateTimeField(null=True)),
                ('livekit_tutor_token_expires', models.DateTimeField(null=True)),
                ('daily_co_room_name', models.CharField(blank=True, max_length=100)),
                ('daily_co_tutor_token', models.TextField(blank=True, null=True)),
                ('daily_co_learner_token', models.TextField(blank=True, null=True)),
                ('daily_co_room_url', models.URLField(blank=True)),
                ('daily_co_tutor_url', models.URLField(blank=True)),
                ('daily_co_learner_url', models.URLField(blank=True)),
                ('daily_co_room_id', models.CharField(blank=True, max_length=50)),
                ('date', models.DateField(blank=True, db_index=True, null=True)),
                ('scheduled_start_time', models.DateTimeField(db_index=True, help_text="Scheduled start in tutor's timezone")),
                ('actual_start_time', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('end_time', models.DateTimeField(db_index=True)),
                ('primary_provider', models.CharField(choices=[('LIVEKIT', 'LiveKit'), ('DAILY_CO', 'Daily.co'), ('FALLBACK', 'Browser WebRTC')], default='LIVEKIT', max_length=10)),
                ('actual_provider', models.CharField(blank=True, choices=[('LIVEKIT', 'LiveKit'), ('DAILY_CO', 'Daily.co'), ('FALLBACK', 'Browser WebRTC')], max_length=10, null=True)),
                ('is_fallback_triggered', models.BooleanField(default=False)),
                ('recording_consent', models.BooleanField(default=False, help_text='Learner consented to recording (GDPR Article 7)')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('learner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='users.user')),
                ('payment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='payments.paymentforliveclass')),
                ('tutor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='users.tutor')),
            ],
            options={
                'verbose_name': 'historical live class session',
                'verbose_name_plural': 'historical live class sessions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSessionEventLog',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('participant_joined', 'Participant Joined'), ('participant_left', 'Participant Left'), ('screenshare_started', 'Screenshare Started'), ('screenshare_ended', 'Screenshare Ended'), ('recording_started', 'Recording Started'), ('recording_ended', 'Recording Ended'), ('room_created', 'Room Created'), ('room_ended', 'Room Ended')], max_length=20)),
                ('participant_sid', models.CharField(blank=True, max_length=64)),
                ('participant_identity', models.CharField(blank=True, max_length=255)),
                ('participant_role', models.CharField(blank=True, max_length=10)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='live_class_streaming.liveclasssession')),
            ],
            options={
                'verbose_name': 'historical session event log',
                'verbose_name_plural': 'historical session event logs',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSessionRecording',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('storage_id', models.CharField(db_index=True, help_text='Opaque storage identifier (GDPR pseudonymization)', max_length=256)),
                ('storage_region', models.CharField(default='eu-west-1', help_text='AWS/GCP region for data residency compliance', max_length=20)),
                ('encryption_key_id', models.CharField(help_text='KMS key identifier for encrypted storage', max_length=64)),
                ('duration_seconds', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('file_size_mb', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('retention_days', models.PositiveSmallIntegerField(default=30, help_text='Days before automatic deletion (GDPR Right to Erasure)', validators=[django.core.validators.MaxValueValidator(365)])),
                ('egress_id', models.CharField(blank=True, help_text="LiveKit's egress job ID", max_length=64)),
                ('livekit_mp4_url', models.URLField(blank=True, help_text='Temporary LiveKit MP4 URL (expires in 24h)')),
                ('local_video_file', models.TextField(blank=True, help_text='Locally stored recording', max_length=100, null=True)),
                ('download_attempts', models.PositiveSmallIntegerField(default=0, help_text='Number of download retries')),
                ('status', models.CharField(choices=[('REQUESTED', 'Recording Requested'), ('STARTED', 'Recording Started'), ('DOWNLOADING', 'Downloading from LiveKit'), ('COMPLETED', 'Successfully Stored'), ('FAILED', 'Recording Failed')], default='REQUESTED', max_length=12)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='live_class_streaming.liveclasssession')),
            ],
            options={
                'verbose_name': 'historical Session Recording',
                'verbose_name_plural': 'historical Session Recordings',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSessionTelemetry',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, editable=False)),
                ('packet_loss', models.FloatField(help_text='Packet loss ratio (0.05 = 5%)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('latency_ms', models.FloatField(help_text='Round-trip latency in milliseconds', validators=[django.core.validators.MinValueValidator(0)])),
                ('jitter_ms', models.FloatField(help_text='Network jitter in milliseconds', validators=[django.core.validators.MinValueValidator(0)])),
                ('resolution', models.CharField(choices=[('240p', '426x240'), ('360p', '640x360'), ('480p', '854x480'), ('720p', '1280x720')], help_text='Current output resolution', max_length=9)),
                ('fps', models.PositiveSmallIntegerField(help_text='Frames per second', validators=[django.core.validators.MaxValueValidator(60)])),
                ('provider', models.CharField(choices=[('LIVEKIT', 'LiveKit'), ('DAILY_CO', 'Daily.co'), ('FALLBACK', 'Browser WebRTC')], max_length=10)),
                ('is_fallback', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='live_class_streaming.liveclasssession')),
            ],
            options={
                'verbose_name': 'historical session telemetry',
                'verbose_name_plural': 'historical Session Telemetry',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTutorLiveClassApiSettings',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('key_source', models.CharField(choices=[('PLATFORM', 'Platform Default'), ('CUSTOM', 'Custom Keys')], default='PLATFORM', help_text='Source of API keys for this tutor', max_length=10)),
                ('custom_livekit_key', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Encrypted LiveKit API key (leave blank for platform default)')),
                ('custom_daily_co_key', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Encrypted Daily.co API key (leave blank for platform default)')),
                ('gdpr_consent', models.BooleanField(default=False, help_text='Tutor consents to data processing under GDPR')),
                ('coc_agreement', models.DateTimeField(blank=True, help_text='Timestamp of Code of Conduct acceptance', null=True)),
                ('bandwidth_verified', models.BooleanField(default=False, help_text='Tutor meets minimum bandwidth requirements')),
                ('last_bandwidth_test', models.DateTimeField(blank=True, help_text='Last network test timestamp', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('tutor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='users.tutor')),
            ],
            options={
                'verbose_name': 'historical Tutor Video Settings',
                'verbose_name_plural': 'historical Tutor Video Settings',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
